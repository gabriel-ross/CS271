Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/09/21 19:10:42
+Basic Logic & Artihmetic     (project1.asm		     Page 1 - 1


				TITLE Basic Logic & Artihmetic     (project1.asm)

				; Author: Gabriel Ross
				; Last Modified: 30-JUN-21
				; OSU email address: rossgab@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 1                 Due Date: 11-Jul-21
				; Description: This file demonstrates basic arthmetic
				; and registry manipulation

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 41 75 74 68 6F	myName		BYTE	"Author: Gabriel Ross",0
	   72 3A 20 47 61
	   62 72 69 65 6C
	   20 52 6F 73 73
	   00
 00000015 50 72 6F 6A 65	progName	BYTE	"Project 1: Basic Logic & Arithmetic",0
	   63 74 20 31 3A
	   20 42 61 73 69
	   63 20 4C 6F 67
	   69 63 20 26 20
	   41 72 69 74 68
	   6D 65 74 69 63
	   00
 00000039 2A 2A 45 43 3A	ec1			BYTE	"**EC: Program repeats until the user chooses to quit",0
	   20 50 72 6F 67
	   72 61 6D 20 72
	   65 70 65 61 74
	   73 20 75 6E 74
	   69 6C 20 74 68
	   65 20 75 73 65
	   72 20 63 68 6F
	   6F 73 65 73 20
	   74 6F 20 71 75
	   69 74 00
 0000006E 2A 2A 45 43 3A	ec2			BYTE	"**EC: Program checks if numbers are not in strictly descending order",0
	   20 50 72 6F 67
	   72 61 6D 20 63
	   68 65 63 6B 73
	   20 69 66 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 6E 6F 74 20
	   69 6E 20 73 74
	   72 69 63 74 6C
	   79 20 64 65 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 00
 000000B3 2A 2A 45 43 3A	ec3			BYTE	"**EC: Program handles negative results and additionally computes B-A, C-A, C-B, C-B-A",0
	   20 50 72 6F 67
	   72 61 6D 20 68
	   61 6E 64 6C 65
	   73 20 6E 65 67
	   61 74 69 76 65
	   20 72 65 73 75
	   6C 74 73 20 61
	   6E 64 20 61 64
	   64 69 74 69 6F
	   6E 61 6C 6C 79
	   20 63 6F 6D 70
	   75 74 65 73 20
	   42 2D 41 2C 20
	   43 2D 41 2C 20
	   43 2D 42 2C 20
	   43 2D 42 2D 41
	   00
 00000109 2A 2A 45 43 3A	ec4			BYTE	"**EC: Program additionally calculates A/B, A/C, B/C, printing both the quotient and remainder",0
	   20 50 72 6F 67
	   72 61 6D 20 61
	   64 64 69 74 69
	   6F 6E 61 6C 6C
	   79 20 63 61 6C
	   63 75 6C 61 74
	   65 73 20 41 2F
	   42 2C 20 41 2F
	   43 2C 20 42 2F
	   43 2C 20 70 72
	   69 6E 74 69 6E
	   67 20 62 6F 74
	   68 20 74 68 65
	   20 71 75 6F 74
	   69 65 6E 74 20
	   61 6E 64 20 72
	   65 6D 61 69 6E
	   64 65 72 00

 00000167 45 52 52 4F 52	notDescMsg	BYTE	"ERROR: The numbers are not in strict descending order.", 0
	   3A 20 54 68 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 20 6E 6F
	   74 20 69 6E 20
	   73 74 72 69 63
	   74 20 64 65 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 2E 00
 0000019E 45 6E 74 65 72	playAgain	BYTE	"Enter 0 to quit and 1 to continue playing: ",0
	   20 30 20 74 6F
	   20 71 75 69 74
	   20 61 6E 64 20
	   31 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 20 70
	   6C 61 79 69 6E
	   67 3A 20 00
 000001CA 47 6F 6F 64 62	byePrompt	BYTE	"Goodbye! Thanks for participating!",0
	   79 65 21 20 54
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   70 61 72 74 69
	   63 69 70 61 74
	   69 6E 67 21 00

 000001ED 45 6E 74 65 72	inputPrompt BYTE	"Enter three numbers, A, B, C, such that A > B > C, and I will calculate the sums, differences, and quotients",0 
	   20 74 68 72 65
	   65 20 6E 75 6D
	   62 65 72 73 2C
	   20 41 2C 20 42
	   2C 20 43 2C 20
	   73 75 63 68 20
	   74 68 61 74 20
	   41 20 3E 20 42
	   20 3E 20 43 2C
	   20 61 6E 64 20
	   49 20 77 69 6C
	   6C 20 63 61 6C
	   63 75 6C 61 74
	   65 20 74 68 65
	   20 73 75 6D 73
	   2C 20 64 69 66
	   66 65 72 65 6E
	   63 65 73 2C 20
	   61 6E 64 20 71
	   75 6F 74 69 65
	   6E 74 73 00
 0000025A 41 3A 20 00		promptA		BYTE	"A: ",0
 0000025E 42 3A 20 00		promptB		BYTE	"B: ",0
 00000262 43 3A 20 00		promptC		BYTE	"C: ",0

 00000266 00000000		inputA		DWORD	?
 0000026A 00000000		inputB		DWORD	?
 0000026E 00000000		inputC		DWORD	?
 00000272 00000000		signedA		SDWORD	?
 00000276 00000000		signedB		SDWORD	?
 0000027A 00000000		signedC		SDWORD	?

				; Memory allocations for sums
 0000027E 00000000		AaddB		DWORD	?
 00000282 00000000		AsubB		DWORD	?
 00000286 00000000		AaddC		DWORD	?
 0000028A 00000000		AsubC		DWORD	?
 0000028E 00000000		BaddC		DWORD	?
 00000292 00000000		BsubC		DWORD	?
 00000296 00000000		AaddBaddC	DWORD	?
				; Memory allocations for messages introducing sum results
 0000029A 41 2B 42 3A 20	AaddBmsg	BYTE	"A+B: ",0
	   00
 000002A0 41 2D 42 3A 20	AsubBmsg	BYTE	"A-B: ",0
	   00
 000002A6 41 2B 43 3A 20	AaddCmsg	BYTE	"A+C: ",0
	   00
 000002AC 41 2D 43 3A 20	AsubCmsg	BYTE	"A-C: ",0
	   00
 000002B2 42 2B 43 3A 20	BaddCmsg	BYTE	"B+C: ",0
	   00
 000002B8 42 2D 43 3A 20	BsubCmsg	BYTE	"B-C: ",0
	   00
 000002BE 41 2B 42 2B 43	ABCmsg		BYTE	"A+B+C: ",0
	   3A 20 00

				; Memory allocations for differences
 000002C6 00000000		BsubA		SDWORD	?
 000002CA 00000000		CsubA		SDWORD	?
 000002CE 00000000		CsubB		SDWORD	?
 000002D2 00000000		CsubBsubA	SDWORD	?

				; Memory allocations for messages introducing difference results
 000002D6 42 2D 41 3A 20	BsubAmsg	BYTE	"B-A: ",0
	   00
 000002DC 43 2D 41 3A 20	CsubAmsg	BYTE	"C-A: ",0
	   00
 000002E2 43 2D 42 3A 20	CsubBmsg	BYTE	"C-B: ",0
	   00
 000002E8 43 2D 42 2D 41	CBAmsg		BYTE	"C-B-A: ",0
	   3A 20 00

				; Memory allocations for quotients and remainders
 000002F0 00000000		AdivBq		DWORD	?
 000002F4 00000000		AdivBr		DWORD	?
 000002F8 00000000		AdivCq		DWORD	?
 000002FC 00000000		AdivCr		DWORD	?
 00000300 00000000		BdivCq		DWORD	?
 00000304 00000000		BdivCr		DWORD	?
				; Memory allocations for messages introducing div results
 00000308 41 2F 42 20 71	AdivBqmsg	BYTE	"A/B quotient: ",0
	   75 6F 74 69 65
	   6E 74 3A 20 00
 00000317 41 2F 42 20 72	AdivBrmsg	BYTE	"A/B remainder: ",0
	   65 6D 61 69 6E
	   64 65 72 3A 20
	   00
 00000327 41 2F 43 20 71	AdivCqmsg	BYTE	"A/C quotient: ",0
	   75 6F 74 69 65
	   6E 74 3A 20 00
 00000336 41 2F 43 20 72	AdivCrmsg	BYTE	"A/C remainder: ",0
	   65 6D 61 69 6E
	   64 65 72 3A 20
	   00
 00000346 42 2F 43 20 71	BdivCqmsg	BYTE	"B/C quotient: ",0
	   75 6F 74 69 65
	   6E 74 3A 20 00
 00000355 42 2F 43 20 72	BdivCrmsg	BYTE	"B/C remainder: ",0
	   65 6D 61 69 6E
	   64 65 72 3A 20
	   00


 00000000			.code
 00000000			main PROC

				; Display author name, project name, and instructions
 00000000  BA 00000000 R		mov		EDX, OFFSET myName
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf
 0000000F  BA 00000015 R		mov		EDX, OFFSET progName
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	CrLf
 0000001E  E8 00000000 E		call	CrLf
 00000023  BA 00000039 R		mov		EDX, OFFSET ec1
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf
 00000032  BA 0000006E R		mov		EDX, OFFSET ec2
 00000037  E8 00000000 E		call	WriteString
 0000003C  E8 00000000 E		call	CrLf
 00000041  BA 000000B3 R		mov		EDX, OFFSET ec3
 00000046  E8 00000000 E		call	WriteString
 0000004B  E8 00000000 E		call	CrLf
 00000050  BA 00000109 R		mov		EDX, OFFSET ec4
 00000055  E8 00000000 E		call	WriteString
 0000005A  E8 00000000 E		call	CrLf
 0000005F  E8 00000000 E		call	CrLf

				; Here to allow user to play again
 00000064			_start:

 00000064  BA 000001ED R		mov		EDX, OFFSET inputPrompt
 00000069  E8 00000000 E		call	WriteString
 0000006E  E8 00000000 E		call	CrLf

				; Take number input from user
				; EC 2: additionally, verifies that A, B, C are in strict descending order

 00000073  BA 0000025A R		mov		EDX, OFFSET promptA
 00000078  E8 00000000 E		call	WriteString
 0000007D  E8 00000000 E		call	ReadDec
 00000082  A3 00000266 R		mov		inputA, EAX
 00000087  A3 00000272 R		mov		signedA, EAX

 0000008C  BA 0000025E R		mov		EDX, OFFSET promptB
 00000091  E8 00000000 E		call	WriteString
 00000096  E8 00000000 E		call	ReadDec
 0000009B  3B 05 00000266 R		CMP		EAX, inputA

 000000A1  0F 83 000002F6		JAE		_notStrictDescending
 000000A7  A3 0000026A R		mov		inputB, EAX
 000000AC  A3 00000276 R		mov		signedB, EAX

 000000B1  BA 00000262 R		mov		EDX, OFFSET promptC
 000000B6  E8 00000000 E		call	WriteString
 000000BB  E8 00000000 E		call	ReadDec
 000000C0  3B 05 0000026A R		CMP		EAX, inputB
 000000C6  0F 83 000002D1		JAE		_notStrictDescending
 000000CC  A3 0000026E R		mov		inputC, EAX
 000000D1  A3 0000027A R		mov		signedC, EAX


				; Calculate expressions and store results

					; A+B
 000000D6  A1 00000266 R		mov		EAX, inputA
 000000DB  03 05 0000026A R		add		EAX, inputB
 000000E1  A3 0000027E R		mov		AaddB, EAX
					; A-B
 000000E6  A1 00000266 R		mov		EAX, inputA
 000000EB  2B 05 0000026A R		sub		EAX, inputB
 000000F1  A3 00000282 R		mov		AsubB, EAX

					; A+C
 000000F6  A1 00000266 R		mov		EAX, inputA
 000000FB  03 05 0000026E R		add		EAX, inputC
 00000101  A3 00000286 R		mov		AaddC, EAX

					; A-C
 00000106  A1 00000266 R		mov		EAX, inputA
 0000010B  2B 05 0000026E R		sub		EAX, inputC
 00000111  A3 0000028A R		mov		AsubC, EAX

					; B+C
 00000116  A1 0000026A R		mov		EAX, inputB
 0000011B  03 05 0000026E R		add		EAX, inputC
 00000121  A3 0000028E R		mov		BaddC, EAX

					; B-C
 00000126  A1 0000026A R		mov		EAX, inputB
 0000012B  2B 05 0000026E R		sub		EAX, inputC
 00000131  A3 00000292 R		mov		BsubC, EAX

					; A+B+C
 00000136  A1 00000266 R		mov		EAX, inputA
 0000013B  03 05 0000026A R		add		EAX, inputB
 00000141  03 05 0000026E R		add		EAX, inputC
 00000147  A3 00000296 R		mov		AaddBaddC, EAX

				; Print expression results

 0000014C  BA 0000029A R		mov		EDX, OFFSET Aaddbmsg
 00000151  E8 00000000 E		call	WriteString
 00000156  A1 0000027E R		mov		EAX, AaddB
 0000015B  E8 00000000 E		call	WriteDec
 00000160  E8 00000000 E		call	CrLf

 00000165  BA 000002A0 R		mov		EDX, OFFSET AsubBmsg
 0000016A  E8 00000000 E		call	WriteString
 0000016F  A1 00000282 R		mov		EAX, AsubB
 00000174  E8 00000000 E		call	WriteDec
 00000179  E8 00000000 E		call	CrLf

 0000017E  BA 000002A6 R		mov		EDX, OFFSET AaddCmsg
 00000183  E8 00000000 E		call	WriteString
 00000188  A1 00000286 R		mov		EAX, AaddC
 0000018D  E8 00000000 E		call	WriteDec
 00000192  E8 00000000 E		call	CrLf

 00000197  BA 000002AC R		mov		EDX, OFFSET AsubCmsg
 0000019C  E8 00000000 E		call	WriteString
 000001A1  A1 0000028A R		mov		EAX, AsubC
 000001A6  E8 00000000 E		call	WriteDec
 000001AB  E8 00000000 E		call	CrLf

 000001B0  BA 000002B2 R		mov		EDX, OFFSET BaddCmsg
 000001B5  E8 00000000 E		call	WriteString
 000001BA  A1 0000028E R		mov		EAX, BaddC
 000001BF  E8 00000000 E		call	WriteDec
 000001C4  E8 00000000 E		call	CrLf

 000001C9  BA 000002B8 R		mov		EDX, OFFSET BsubCmsg
 000001CE  E8 00000000 E		call	WriteString
 000001D3  A1 00000292 R		mov		EAX, BsubC
 000001D8  E8 00000000 E		call	WriteDec
 000001DD  E8 00000000 E		call	CrLf

 000001E2  BA 000002BE R		mov		EDX, OFFSET ABCmsg
 000001E7  E8 00000000 E		call	WriteString
 000001EC  A1 00000296 R		mov		EAX, AaddBaddC
 000001F1  E8 00000000 E		call	WriteDec
 000001F6  E8 00000000 E		call	CrLf
 000001FB  E8 00000000 E		call	CrLf
					

				; EC 3: calculate negative results B-A, C-A, C-B, C-B-A
 00000200  A1 0000026A R		mov		EAX, inputB
 00000205  2B 05 00000266 R		sub		EAX, inputA
 0000020B  A3 000002C6 R		mov		BsubA, EAX

 00000210  A1 0000026E R		mov		EAX, inputC
 00000215  2B 05 00000266 R		sub		EAX, inputA
 0000021B  A3 000002CA R		mov		CsubA, EAX

 00000220  A1 0000026E R		mov		EAX, inputC
 00000225  2B 05 0000026A R		sub		EAX, inputB
 0000022B  A3 000002CE R		mov		CsubB, EAX


 00000230  A1 0000027A R		mov		EAX, signedC
 00000235  2B 05 00000276 R		sub		EAX, signedB
 0000023B  2B 05 00000272 R		sub		EAX, signedA
 00000241  A3 000002D2 R		mov		CsubBsubA, EAX

				; EC 3: print negative results  B-A, C-A, C-B, C-B-A

 00000246  BA 000002D6 R		mov		EDX, OFFSET BsubAmsg
 0000024B  E8 00000000 E		call	WriteString
 00000250  A1 000002C6 R		mov		EAX, BsubA
 00000255  E8 00000000 E		call	WriteInt
 0000025A  E8 00000000 E		call	CrLf

 0000025F  BA 000002DC R		mov		EDX, OFFSET CsubAmsg
 00000264  E8 00000000 E		call	WriteString
 00000269  A1 000002CA R		mov		EAX, CsubA
 0000026E  E8 00000000 E		call	WriteInt
 00000273  E8 00000000 E		call	CrLf

 00000278  BA 000002E2 R		mov		EDX, OFFSET CsubBmsg
 0000027D  E8 00000000 E		call	WriteString
 00000282  A1 000002CE R		mov		EAX, CsubB
 00000287  E8 00000000 E		call	WriteInt
 0000028C  E8 00000000 E		call	CrLf

 00000291  BA 000002E8 R		mov		EDX, OFFSET CBAmsg
 00000296  E8 00000000 E		call	WriteString
 0000029B  A1 000002D2 R		mov		EAX, CsubBsubA
 000002A0  E8 00000000 E		call	WriteInt
 000002A5  E8 00000000 E		call	CrLf
 000002AA  E8 00000000 E		call	CrLf

				; EC 4: calculate the quotients and remainders A/B, A/C, B/C

 000002AF  A1 00000266 R		mov		EAX, inputA
 000002B4  BA 00000000			mov		EDX, 0
 000002B9  F7 35 0000026A R		DIV		inputB
 000002BF  A3 000002F0 R		mov		AdivBq, EAX
 000002C4  89 15 000002F4 R		mov		AdivBr, EDX

 000002CA  A1 00000266 R		mov		EAX, inputA
 000002CF  BA 00000000			mov		EDX, 0
 000002D4  F7 35 0000026E R		DIV		inputC
 000002DA  A3 000002F8 R		mov		AdivCq, EAX
 000002DF  89 15 000002FC R		mov		AdivCr, EDX

 000002E5  A1 0000026A R		mov		EAX, inputB
 000002EA  BA 00000000			mov		EDX, 0
 000002EF  F7 35 0000026E R		DIV		inputC
 000002F5  A3 00000300 R		mov		BdivCq, EAX
 000002FA  89 15 00000304 R		mov		BdivCr, EDX

				; EC 4: print quotients and remainders A/B, A/C, B/C

 00000300  BA 00000308 R		mov		EDX, OFFSET	AdivBqmsg
 00000305  E8 00000000 E		call	WriteString
 0000030A  A1 000002F0 R		mov		EAX, AdivBq
 0000030F  E8 00000000 E		call	WriteDec
 00000314  E8 00000000 E		call	CrLf

 00000319  BA 00000317 R		mov		EDX, OFFSET AdivBrmsg
 0000031E  E8 00000000 E		call	WriteString
 00000323  A1 000002F4 R		mov		EAX, AdivBr
 00000328  E8 00000000 E		call	WriteDec
 0000032D  E8 00000000 E		call	CrLf
					
 00000332  BA 00000327 R		mov		EDX, OFFSET	AdivCqmsg
 00000337  E8 00000000 E		call	WriteString
 0000033C  A1 000002F8 R		mov		EAX, AdivCq
 00000341  E8 00000000 E		call	WriteDec
 00000346  E8 00000000 E		call	CrLf

 0000034B  BA 00000336 R		mov		EDX, OFFSET AdivCrmsg
 00000350  E8 00000000 E		call	WriteString
 00000355  A1 000002FC R		mov		EAX, AdivCr
 0000035A  E8 00000000 E		call	WriteDec
 0000035F  E8 00000000 E		call	CrLf
					
 00000364  BA 00000346 R		mov		EDX, OFFSET	BdivCqmsg
 00000369  E8 00000000 E		call	WriteString
 0000036E  A1 00000300 R		mov		EAX, BdivCq
 00000373  E8 00000000 E		call	WriteDec
 00000378  E8 00000000 E		call	CrLf

 0000037D  BA 00000355 R		mov		EDX, OFFSET BdivCrmsg
 00000382  E8 00000000 E		call	WriteString
 00000387  A1 00000304 R		mov		EAX, BdivCr
 0000038C  E8 00000000 E		call	WriteDec
 00000391  E8 00000000 E		call	CrLf
 00000396  E8 00000000 E		call	CrLf

 0000039B  EB 0F			JMP		_playAgain

				; EC 2: print error that the inputs were not in strict-descending order
 0000039D			_notStrictDescending:
 0000039D  BA 00000167 R		mov		EDX, OFFSET	NotDescMsg
 000003A2  E8 00000000 E		call WriteString
 000003A7  E8 00000000 E		call CrLf

				; EC 1: See if user wants to play again or quit
 000003AC			_playAgain:
 000003AC  BA 0000019E R		mov		EDX, OFFSET	playAgain
 000003B1  E8 00000000 E		call	WriteString
 000003B6  E8 00000000 E		call	ReadDec
 000003BB  E8 00000000 E		call	CrLf
 000003C0  83 F8 01			CMP		EAX, 1
 000003C3  0F 84 FFFFFC9B		JE		_start


				; Say goodbye
 000003C9			_goodbye:
 000003C9  BA 000001CA R		mov		EDX, OFFSET byePrompt
 000003CE  E8 00000000 E		call	WriteString
 000003D3  E8 00000000 E		call	CrLf

					Invoke ExitProcess,0	; exit to operating system
 000003D8  6A 00	   *	    push   +000000000h
 000003DA  E8 00000000 E   *	    call   ExitProcess
 000003DF			main ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/09/21 19:10:42
+Basic Logic & Artihmetic     (project1.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000365 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003DF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000003DF Public STDCALL
  _start . . . . . . . . . . . .	L Near	 00000064 _TEXT	
  _notStrictDescending . . . . .	L Near	 0000039D _TEXT	
  _playAgain . . . . . . . . . .	L Near	 000003AC _TEXT	
  _goodbye . . . . . . . . . . .	L Near	 000003C9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ABCmsg . . . . . . . . . . . . .	Byte	 000002BE _DATA	
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AaddBaddC  . . . . . . . . . . .	DWord	 00000296 _DATA	
AaddBmsg . . . . . . . . . . . .	Byte	 0000029A _DATA	
AaddB  . . . . . . . . . . . . .	DWord	 0000027E _DATA	
AaddCmsg . . . . . . . . . . . .	Byte	 000002A6 _DATA	
AaddC  . . . . . . . . . . . . .	DWord	 00000286 _DATA	
AdivBqmsg  . . . . . . . . . . .	Byte	 00000308 _DATA	
AdivBq . . . . . . . . . . . . .	DWord	 000002F0 _DATA	
AdivBrmsg  . . . . . . . . . . .	Byte	 00000317 _DATA	
AdivBr . . . . . . . . . . . . .	DWord	 000002F4 _DATA	
AdivCqmsg  . . . . . . . . . . .	Byte	 00000327 _DATA	
AdivCq . . . . . . . . . . . . .	DWord	 000002F8 _DATA	
AdivCrmsg  . . . . . . . . . . .	Byte	 00000336 _DATA	
AdivCr . . . . . . . . . . . . .	DWord	 000002FC _DATA	
AsubBmsg . . . . . . . . . . . .	Byte	 000002A0 _DATA	
AsubB  . . . . . . . . . . . . .	DWord	 00000282 _DATA	
AsubCmsg . . . . . . . . . . . .	Byte	 000002AC _DATA	
AsubC  . . . . . . . . . . . . .	DWord	 0000028A _DATA	
BaddCmsg . . . . . . . . . . . .	Byte	 000002B2 _DATA	
BaddC  . . . . . . . . . . . . .	DWord	 0000028E _DATA	
BdivCqmsg  . . . . . . . . . . .	Byte	 00000346 _DATA	
BdivCq . . . . . . . . . . . . .	DWord	 00000300 _DATA	
BdivCrmsg  . . . . . . . . . . .	Byte	 00000355 _DATA	
BdivCr . . . . . . . . . . . . .	DWord	 00000304 _DATA	
BsubAmsg . . . . . . . . . . . .	Byte	 000002D6 _DATA	
BsubA  . . . . . . . . . . . . .	DWord	 000002C6 _DATA	
BsubCmsg . . . . . . . . . . . .	Byte	 000002B8 _DATA	
BsubC  . . . . . . . . . . . . .	DWord	 00000292 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CBAmsg . . . . . . . . . . . . .	Byte	 000002E8 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CsubAmsg . . . . . . . . . . . .	Byte	 000002DC _DATA	
CsubA  . . . . . . . . . . . . .	DWord	 000002CA _DATA	
CsubBmsg . . . . . . . . . . . .	Byte	 000002E2 _DATA	
CsubBsubA  . . . . . . . . . . .	DWord	 000002D2 _DATA	
CsubB  . . . . . . . . . . . . .	DWord	 000002CE _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byePrompt  . . . . . . . . . . .	Byte	 000001CA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 00000039 _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 0000006E _DATA	
ec3  . . . . . . . . . . . . . .	Byte	 000000B3 _DATA	
ec4  . . . . . . . . . . . . . .	Byte	 00000109 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputA . . . . . . . . . . . . .	DWord	 00000266 _DATA	
inputB . . . . . . . . . . . . .	DWord	 0000026A _DATA	
inputC . . . . . . . . . . . . .	DWord	 0000026E _DATA	
inputPrompt  . . . . . . . . . .	Byte	 000001ED _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 00000000 _DATA	
notDescMsg . . . . . . . . . . .	Byte	 00000167 _DATA	
playAgain  . . . . . . . . . . .	Byte	 0000019E _DATA	
progName . . . . . . . . . . . .	Byte	 00000015 _DATA	
promptA  . . . . . . . . . . . .	Byte	 0000025A _DATA	
promptB  . . . . . . . . . . . .	Byte	 0000025E _DATA	
promptC  . . . . . . . . . . . .	Byte	 00000262 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
signedA  . . . . . . . . . . . .	DWord	 00000272 _DATA	
signedB  . . . . . . . . . . . .	DWord	 00000276 _DATA	
signedC  . . . . . . . . . . . .	DWord	 0000027A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
