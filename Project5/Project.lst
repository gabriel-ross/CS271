Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/31/21 22:56:32
<Project 5: Arrays, Addressing, and Stack-Passed Parameters   Page 1 - 1


				TITLE Project 5: Arrays, Addressing, and Stack-Passed Parameters     (proj5_rossgab.asm)

				; Author: Gabriel Ross
				; Last Modified: 
				; OSU email address: rossgab@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 5                Due Date: 08-Aug-21
				; Description: This program generates a random array, prints it, sorts it,
				; prints the sorted array's median and the sorted array itself, then 
				; prints the number of instances of each number in the sorted array.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


 = 0000001D			HI = 29
 = 0000000A			LO = 10
 = 000000C8			ARRAY_SIZE = 200

 00000000			.data
				; intro, title, and outro strings
 00000000 50 72 6F 6A 65	prog	BYTE	"Project 5: Arrays, Addressing, and Stack-Passed Parameters. By Gabriel Ross.",0
	   63 74 20 35 3A
	   20 41 72 72 61
	   79 73 2C 20 41
	   64 64 72 65 73
	   73 69 6E 67 2C
	   20 61 6E 64 20
	   53 74 61 63 6B
	   2D 50 61 73 73
	   65 64 20 50 61
	   72 61 6D 65 74
	   65 72 73 2E 20
	   42 79 20 47 61
	   62 72 69 65 6C
	   20 52 6F 73 73
	   2E 00
 0000004D 54 68 69 73 20	desc	BYTE	"This program generates a random array of length 200 with integers in the range [10, 29] and displayes the random list.",0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 61 20
	   72 61 6E 64 6F
	   6D 20 61 72 72
	   61 79 20 6F 66
	   20 6C 65 6E 67
	   74 68 20 32 30
	   30 20 77 69 74
	   68 20 69 6E 74
	   65 67 65 72 73
	   20 69 6E 20 74
	   68 65 20 72 61
	   6E 67 65 20 5B
	   31 30 2C 20 32
	   39 5D 20 61 6E
	   64 20 64 69 73
	   70 6C 61 79 65
	   73 20 74 68 65
	   20 72 61 6E 64
	   6F 6D 20 6C 69
	   73 74 2E 00
 000000C4 49 74 20 74 68	desc2	BYTE	"It then sorts the list in ascending order and displayes the median value, the sorted list, and the number of occurrences of each number.",0
	   65 6E 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 20 69 6E
	   20 61 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 65 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 2C 20 74
	   68 65 20 73 6F
	   72 74 65 64 20
	   6C 69 73 74 2C
	   20 61 6E 64 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 6F
	   63 63 75 72 72
	   65 6E 63 65 73
	   20 6F 66 20 65
	   61 63 68 20 6E
	   75 6D 62 65 72
	   2E 00
 0000014D 55 6E 73 6F 72	randArr	BYTE	"Unsorted array:",0
	   74 65 64 20 61
	   72 72 61 79 3A
	   00
 0000015D 20 00			space	BYTE	" ",0
 0000015F 4D 65 64 69 61	med		BYTE	"Median value of the sorted array:",0
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   73 6F 72 74 65
	   64 20 61 72 72
	   61 79 3A 00
 00000181 53 6F 72 74 65	sorted	BYTE	"Sorted array:",0
	   64 20 61 72 72
	   61 79 3A 00
 0000018F 4E 75 6D 62 65	numOf	BYTE	"Number of instances of each number in the provided random range:",0
	   72 20 6F 66 20
	   69 6E 73 74 61
	   6E 63 65 73 20
	   6F 66 20 65 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   69 6E 20 74 68
	   65 20 70 72 6F
	   76 69 64 65 64
	   20 72 61 6E 64
	   6F 6D 20 72 61
	   6E 67 65 3A 00
 000001D0 47 6C 61 64 20	bye		BYTE	"Glad you made it this far. Thanks for reading!",0
	   79 6F 75 20 6D
	   61 64 65 20 69
	   74 20 74 68 69
	   73 20 66 61 72
	   2E 20 54 68 61
	   6E 6B 73 20 66
	   6F 72 20 72 65
	   61 64 69 6E 67
	   21 00

				; memory allocations for array to be sorted and array containing number of instances of each number
 000001FF  000000C8 [		array	DWORD	ARRAY_SIZE	DUP(?)
	    00000000
	   ]
 0000051F  00000014 [		counts	DWORD	HI+1-LO	DUP(?)
	    00000000
	   ]


				;-----------------------------------------------------
				; Name:
				; Description:
				; Preconditions:
				; Postconditions:
				; Receives:
				; Returns:
				;-----------------------------------------------------
 00000000			.code
 00000000			main PROC

				; Print intro
 00000000  68 00000000 R		PUSH	OFFSET prog
 00000005  68 0000004D R		PUSH	OFFSET desc
 0000000A  68 000000C4 R		PUSH	OFFSET desc2
 0000000F  E8 000000A2			CALL	intro

					; Generate random array
 00000014  6A 1D			PUSH	HI
 00000016  6A 0A			PUSH	LO
 00000018  68 000000C8			PUSH	ARRAY_SIZE
 0000001D  68 000001FF R		PUSH	OFFSET array ; Mem offset of empty array to be filled
 00000022  6A 04			PUSH	TYPE array
 00000024  E8 000000C2			CALL	genRandArray

					; Display random array
 00000029  68 0000014D R		PUSH	OFFSET randArr ; String introducing rand array, not the array itself
 0000002E  68 000000C8			PUSH	ARRAY_SIZE
 00000033  68 000001FF R		PUSH	OFFSET array
 00000038  6A 04			PUSH	TYPE array
 0000003A  E8 000000D8			CALL	printArray

					; Sort array
 0000003F  68 000001FF R		PUSH	OFFSET array
 00000044  68 000000C8			PUSH	ARRAY_SIZE
 00000049  6A 04			PUSH	TYPE array
 0000004B  E8 00000124			CALL	sortArray

					; Calculate and display median of sorted array
 00000050  68 0000015F R		PUSH	OFFSET med
 00000055  68 000001FF R		PUSH	OFFSET array
 0000005A  68 000000C8			PUSH	ARRAY_SIZE
 0000005F  6A 04			PUSH	TYPE array
 00000061  E8 00000166			CALL	displayMedian

					; Display sorted array
 00000066  68 00000181 R		PUSH	OFFSET sorted 
 0000006B  68 000000C8			PUSH	ARRAY_SIZE
 00000070  68 000001FF R		PUSH	OFFSET array
 00000075  6A 04			PUSH	TYPE array
 00000077  E8 0000009B			CALL	printArray

					; Count instances of each number
 0000007C  68 000001FF R		PUSH	OFFSET array
 00000081  68 000000C8			PUSH	ARRAY_SIZE
 00000086  68 0000051F R		PUSH	OFFSET counts
 0000008B  6A 04			PUSH	TYPE array
 0000008D  E8 000001C9			CALL	countArray

					; Print counts array
 00000092  68 0000018F R		PUSH	OFFSET numOf
 00000097  6A 14			PUSH	HI+1-LO
 00000099  68 0000051F R		PUSH	OFFSET counts
 0000009E  6A 04			PUSH	TYPE counts
 000000A0  E8 00000072			CALL	printArray

					; Say goodbye
 000000A5  68 000001D0 R		PUSH	OFFSET bye
 000000AA  E8 000001D6			CALL	writeThis

					Invoke ExitProcess,0	; exit to operating system
 000000AF  6A 00	   *	    push   +000000000h
 000000B1  E8 00000000 E   *	    call   ExitProcess
 000000B6			main ENDP


				;-----------------------------------------------------
				; Name: intro
				; Description: Prints the title of the program and explains what it does to the user
				; Preconditions: Title and description are strings stored on stack in order: title, first half description, second half description
				; Postconditions: None
				; Receives:
				;		[EBP+20] = Title of program
				;		[EBP+16] = First half of description
				;		[EBP+12] = Second half of description
				; Returns: None
				;-----------------------------------------------------
 000000B6			intro PROC USES EDX
 000000B6  52		   *	    push   edx
 000000B7  55				PUSH	EBP
 000000B8  8B EC			MOV		EBP, ESP

 000000BA  8B 55 14			MOV		EDX, [EBP+20]
 000000BD  E8 00000000 E		CALL	WriteString
 000000C2  E8 00000000 E		CALL	CrLf
 000000C7  8B 55 10			MOV		EDX, [EBP+16]
 000000CA  E8 00000000 E		CALL	WriteString
 000000CF  E8 00000000 E		CALL	CrLf
 000000D4  8B 55 0C			MOV		EDX, [EBP+12]
 000000D7  E8 00000000 E		CALL	WriteString
 000000DC  E8 00000000 E		CALL	CrLf
 000000E1  E8 00000000 E		CALL	CrLf

 000000E6  5D				POP		EBP
 000000E7  5A		   *	    pop    edx
 000000E8  C2 000C			RET		12
 000000EB			intro ENDP

				;-----------------------------------------------------
				; Name: genRandArray
				; Description: Generates an array of passed size filled with random numbers in the passed range
				; Preconditions: Arguments passed on stack in order: upper range, lower range, array size, array offset, data type of array
				; Postconditions: None
				; Receives:
				;		[EBP+36] = upper range of the random nums 
				;		[EBP+32] = lower range of the random nums
				;		[EBP+28] = size of array to be filled
				;		[EBP+24] = memory offset of output array to be filled
				;		[EBP+20] = data type contained in array
				; Returns: Array passed as argument, filled with random numbers
				;-----------------------------------------------------
 000000EB			genRandArray PROC USES EAX ECX EDI
 000000EB  50		   *	    push   eax
 000000EC  51		   *	    push   ecx
 000000ED  57		   *	    push   edi
 000000EE  55				PUSH	EBP
 000000EF  8B EC			MOV		EBP, ESP

 000000F1  8B 4D 1C			MOV		ECX, [EBP+28]
 000000F4  8B 7D 18			MOV		EDI, [EBP+24]
 000000F7  E8 00000000 E		CALL	Randomize
 000000FC				_fillarray:
						; gen rand num
 000000FC  B8 00000014				MOV		EAX, HI+1-LO
 00000101  E8 00000000 E			CALL	RandomRange
 00000106  83 C0 0A				ADD		EAX, LO
						; move to mem address contained in [EDI]
 00000109  89 07				MOV		[EDI], EAX
						; move to next index
 0000010B  03 7D 14				ADD		EDI, [EBP+20]
 0000010E  E2 EC				LOOP	_fillArray

 00000110  5D				POP		EBP
 00000111  5F		   *	    pop    edi
 00000112  59		   *	    pop    ecx
 00000113  58		   *	    pop    eax
 00000114  C2 0014			RET		20
 00000117			genRandArray ENDP


				;-----------------------------------------------------
				; Name: printArray
				; Description: Prints given array to console with one space between each integer and 20 integers per line
				; Preconditions: 
				;		Arguments passed on stack in order: array title, array size, array address, data type of array
				;		Array filled with DWORD integers
				; Postconditions: None
				; Receives:
				;		[EBP+40] = title of array being printed
				;		[EBP+36] = size of array being printed
				;		[EBP+32] = memory address of first index of array to be printed
				;		[EBP+28] = data type contained in array
				; Returns: None
				;-----------------------------------------------------
 00000117			printArray PROC USES EAX EBX ECX EDX ESI
 00000117  50		   *	    push   eax
 00000118  53		   *	    push   ebx
 00000119  51		   *	    push   ecx
 0000011A  52		   *	    push   edx
 0000011B  56		   *	    push   esi
 0000011C  55				PUSH	EBP
 0000011D  8B EC			MOV		EBP, ESP

 0000011F  8B 55 28			MOV		EDX, [EBP+40]
 00000122  E8 00000000 E		CALL	WriteString
 00000127  E8 00000000 E		CALL	CrLf
					
 0000012C  BB 00000000			MOV		EBX, 0 ; Will be counting number of ints on current line
 00000131  8B 4D 24			MOV		ECX, [EBP+36]
 00000134  8B 75 20			MOV		ESI, [EBP+32]
 00000137				_iterateOverArr:
 00000137  83 FB 14				CMP		EBX, 20
 0000013A  74 19				JE		_newLine
 0000013C				_newLineChecked:
 0000013C  8B 06				MOV		EAX, [ESI]
 0000013E  E8 00000000 E			CALL	WriteDec
 00000143  BA 0000015D R			MOV		EDX, OFFSET space
 00000148  E8 00000000 E			CALL	WriteString
 0000014D  43					INC		EBX
 0000014E  03 75 1C				ADD		ESI, [EBP+28]
 00000151  E2 E4				LOOP	_iterateOverArr
 00000153  EB 0C			JMP		_return

 00000155				_newLine:
 00000155  E8 00000000 E			CALL	CrLf
 0000015A  BB 00000000				MOV		EBX, 0
 0000015F  EB DB				JMP		_newLineChecked

 00000161				_return:
 00000161  E8 00000000 E			CALL	CrLf
 00000166  E8 00000000 E			CALL	CrLf
 0000016B  5D					POP		EBP
 0000016C  5E		   *	    pop    esi
 0000016D  5A		   *	    pop    edx
 0000016E  59		   *	    pop    ecx
 0000016F  5B		   *	    pop    ebx
 00000170  58		   *	    pop    eax
 00000171  C2 0010				RET		16
 00000174			printArray ENDP


				;-----------------------------------------------------
				; Name: sortArray
				; Description: Sorts the input array using bubble sort
				; Preconditions: 
				;		Arguments passed on stack in order: memory address of array, size of array, data type of array
				;		Array filled with DWORD integers
				; Postconditions:
				; Receives:
				;		[EBP+36] = Memory offset of first index of arrau
				;		[EBP+32] = Size of array
				;		[EBP+28] = data type of contained array
				; Returns:
				;-----------------------------------------------------
 00000174			sortArray PROC USES EAX EBX ECX EDI ESI
 00000174  50		   *	    push   eax
 00000175  53		   *	    push   ebx
 00000176  51		   *	    push   ecx
 00000177  57		   *	    push   edi
 00000178  56		   *	    push   esi
 00000179  55				PUSH	EBP
 0000017A  8B EC			MOV		EBP, ESP

					

 0000017C  8B 4D 20			MOV		ECX, [EBP+32]
 0000017F  49				DEC		ECX
					
 00000180				_iterate:
 00000180  8B D9				MOV		EBX, ECX ; Preserve ECX
						; ESI will contain mem. address of current index in array
						; EDI will contain mem. address of next index in array
 00000182  8B 75 24				MOV		ESI, [EBP+36]
 00000185  8B FE				MOV		EDI, ESI
 00000187  03 7D 1C				ADD		EDI, [EBP+28]
 0000018A					_innerLoop:
 0000018A  8B 06					MOV		EAX, [ESI]
							; Compare the current value to the next value in the array
 0000018C  3B 07					CMP		EAX, [EDI]
 0000018E  77 0D					JA		_swap
 00000190						_return:
 00000190  8B F7					MOV		ESI, EDI
 00000192  03 7D 1C					ADD		EDI, [EBP+28]
 00000195  E2 F3					LOOP	_innerLoop
 00000197  8B CB				MOV		ECX, EBX ; Restore ECX
 00000199  E2 E5				LOOP	_iterate

 0000019B  EB 09				JMP		_end

 0000019D				_swap:
 0000019D  56					PUSH	ESI
 0000019E  57					PUSH	EDI
 0000019F  E8 0000000B				CALL	exchangeEle
 000001A4  EB EA				JMP		_return

 000001A6				_end:
 000001A6  5D					POP		EBP
 000001A7  5E		   *	    pop    esi
 000001A8  5F		   *	    pop    edi
 000001A9  59		   *	    pop    ecx
 000001AA  5B		   *	    pop    ebx
 000001AB  58		   *	    pop    eax
 000001AC  C2 0008				RET		8
 000001AF			sortArray ENDP


				;-----------------------------------------------------
				; Name: exchangeEle
				; Description: Swaps the values of two memory addresses
				; Preconditions: Arguments are memory addresses passed on the stack
				; Postconditions: Modifies the array(s) passed in
				; Receives: 
				;		[EBP+28] = Memory address of first element 
				;		[EBP+24] = Memory address of second element
				; Returns: None
				;-----------------------------------------------------
 000001AF			exchangeEle PROC USES EAX EBX EDI ESI
 000001AF  50		   *	    push   eax
 000001B0  53		   *	    push   ebx
 000001B1  57		   *	    push   edi
 000001B2  56		   *	    push   esi
 000001B3  55				PUSH	EBP
 000001B4  8B EC			MOV		EBP, ESP

 000001B6  8B 75 1C			MOV		ESI, [EBP+28]
 000001B9  8B 7D 18			MOV		EDI, [EBP+24]

 000001BC  8B 06			MOV		EAX, [ESI]
 000001BE  8B 1F			MOV		EBX, [EDI]

 000001C0  89 07			MOV		[EDI], EAX
 000001C2  89 1E			MOV		[ESI], EBX

 000001C4  5D				POP		EBP
 000001C5  5E		   *	    pop    esi
 000001C6  5F		   *	    pop    edi
 000001C7  5B		   *	    pop    ebx
 000001C8  58		   *	    pop    eax
 000001C9  C2 0008			RET		8
 000001CC			exchangeEle ENDP


				;-----------------------------------------------------
				; Name: displayMedian
				; Description: Calculates and displayes the median of the input array. If array size is even it uses the average of the two middle values.
				; Preconditions: 
				;		Arguments are passed on the stack in order: title, memory address of array, size of array, data type of array
				;		Input array is an array of integers
				;		Title is string
				; Postconditions: None
				; Receives:
				;		[EBP+36] = title
				;		[EBP+32] = Memory offset of first index of input array
				;		[EBP+28] = Size of input array
				;		[EBP+24] = data type of input array
				; Returns: None
				;-----------------------------------------------------
 000001CC			displayMedian PROC USES EAX EBX EDX ESI
 000001CC  50		   *	    push   eax
 000001CD  53		   *	    push   ebx
 000001CE  52		   *	    push   edx
 000001CF  56		   *	    push   esi
 000001D0  55				PUSH	EBP
 000001D1  8B EC			MOV		EBP, ESP

 000001D3  8B 55 24			MOV		EDX, [EBP+36]
 000001D6  E8 00000000 E		CALL	WriteString
 000001DB  E8 00000000 E		CALL	CrLf

 000001E0  8B 75 20			MOV		ESI, [EBP+32]

 000001E3  BA 00000000			MOV		EDX, 0
 000001E8  8B 45 1C			MOV		EAX, [EBP+28]
 000001EB  BB 00000002			MOV		EBX, 2
 000001F0  F7 F3			DIV		EBX
 000001F2  83 FA 00			CMP		EDX, 0
 000001F5  74 0E			JE		_evenSizedArray
					; if size of array is odd
 000001F7				_oddSizedArray:
						; EAX contains index of middle value. Multiply by array data type to get memory offset of middle value.
 000001F7  F7 65 18				MUL		DWORD PTR [EBP+24]
 000001FA  03 F0				ADD		ESI, EAX
 000001FC  8B 06		  		MOV		EAX, [ESI]
 000001FE  E8 00000000 E			CALL	WriteDec
 00000203  EB 25				JMP		_exit

					
 00000205				_evenSizedArray:
						; Move two middle values to EAX and EBX for comparison
 00000205  F7 65 18				MUL		DWORD PTR [EBP+24]
 00000208  03 F0				ADD		ESI, EAX
 0000020A  8B 06				MOV		EAX, [ESI]
 0000020C  2B 75 18				SUB		ESI, [EBP+24]
 0000020F  8B 1E				MOV		EBX, [ESI]

 00000211  3B C3				CMP		EAX, EBX
 00000213  75 07				JNE		_midValsNotEqual

 00000215					_midValsEqual:
 00000215  E8 00000000 E				CALL	WriteDec
 0000021A  EB 0E					JMP		_exit

 0000021C					_midValsNotEqual:
							; Find average of middle values
 0000021C  50						PUSH	EAX
 0000021D  53						PUSH	EBX
 0000021E  E8 00000017					CALL	findAverage
 00000223  E8 00000000 E				CALL	WriteDec
 00000228  EB 00					JMP		_exit
					

 0000022A				_exit:
 0000022A  E8 00000000 E			CALL	CrLf
 0000022F  E8 00000000 E			CALL	CrLf
 00000234  5D					POP		EBP
						RET
 00000235  5E		   *	    pop    esi
 00000236  5A		   *	    pop    edx
 00000237  5B		   *	    pop    ebx
 00000238  58		   *	    pop    eax
 00000239  C3		   *	    ret    00000h
 0000023A			displayMedian ENDP



				;-----------------------------------------------------
				; Name: findAverage
				; Description: Helper procesdure for displayMedian. Finds the average of two integers passed on the stack, rounding to the nearest integer.
				; Preconditions: Values are of type DWORD
				; Postconditions: Modifies EAX, EBX
				; Receives:
				;		[EBP+16] = Value one
				;		[EBP+12] = Value two
				; Returns:
				;		EAX = Rounded integer average of the two values
				;-----------------------------------------------------
 0000023A			findAverage PROC USES EDX
 0000023A  52		   *	    push   edx
 0000023B  55				PUSH	EBP
 0000023C  8B EC			MOV		EBP, ESP

 0000023E  8B 45 10			MOV		EAX, [EBP+16]
 00000241  03 45 0C			ADD		EAX, [EBP+12]
 00000244  BA 00000000			MOV		EDX, 0
 00000249  BB 00000002			MOV		EBX, 2
 0000024E  F7 F3			DIV		EBX

 00000250  83 FA 01			CMP		EDX, 1
 00000253  72 01			JB		_exit

 00000255				_roundUp:
 00000255  40					INC		EAX
					
 00000256				_exit:
 00000256  5D					POP		EBP
 00000257  5A		   *	    pop    edx
 00000258  C2 0008				RET		8
 0000025B			findAverage ENDP

				;-----------------------------------------------------
				; Name: countArray
				; Description: Counts the number of instances of each number of input array
				; Preconditions: 
				;		Integers in input array are in range [HI,LO] 
				;		Counting array is filled with zeroes
				; Postconditions: Modifies counting array
				; Receives:
				;		[EBP+40] = Memory offset of first index of array to be counted
				;		[EBP+36] = Size of input array
				;		[EBP+32] = output array where counts will be written
				;		[EBP+28] = data type of array to be counted
				; Returns: Counting array = number of instances of each number in input array
				;-----------------------------------------------------
 0000025B			countArray PROC USES EAX ECX EDX ESI EDI
 0000025B  50		   *	    push   eax
 0000025C  51		   *	    push   ecx
 0000025D  52		   *	    push   edx
 0000025E  56		   *	    push   esi
 0000025F  57		   *	    push   edi
 00000260  55				PUSH	EBP
 00000261  8B EC			MOV		EBP, ESP

 00000263  8B 4D 24			MOV		ECX, [EBP+36]
 00000266  8B 75 28			MOV		ESI, [EBP+40]
 00000269  8B 7D 20			MOV		EDI, [EBP+32]

 0000026C				_iterate:
 0000026C  8B 06				MOV		EAX, [ESI]
 0000026E  83 E8 0A				SUB		EAX, LO
 00000271  F7 65 1C				MUL		DWORD PTR [EBP+28]
 00000274  FF 04 07				INC		[EDI+DWORD PTR [EAX]]

 00000277  03 75 1C				ADD		ESI, [EBP+28]
 0000027A  E2 F0				LOOP	_iterate

 0000027C  5D				POP		EBP
 0000027D  5F		   *	    pop    edi
 0000027E  5E		   *	    pop    esi
 0000027F  5A		   *	    pop    edx
 00000280  59		   *	    pop    ecx
 00000281  58		   *	    pop    eax
 00000282  C2 0010			RET		16
 00000285			countArray ENDP



				;-----------------------------------------------------
				; Name: writeThis
				; Description: Writes the passed in string to the console
				; Preconditions: Input is memory address of a string, passed on the stack
				; Postconditions: None
				; Receives:
				;		[EBP+12] = Memory offset of string to be written
				; Returns: None
				;-----------------------------------------------------
 00000285			writeThis PROC USES EDX
 00000285  52		   *	    push   edx
 00000286  55				PUSH	EBP
 00000287  8B EC			MOV		EBP, ESP

 00000289  8B 55 0C			MOV		EDX, [EBP+12]
 0000028C  E8 00000000 E		CALL	WriteString
 00000291  E8 00000000 E		CALL	CrLf
 00000296  E8 00000000 E		CALL	CrLf

 0000029B  5D				POP		EBP	
 0000029C  5A		   *	    pop    edx
 0000029D  C2 0004			RET		4
 000002A0			writeThis ENDP

				END main








Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/31/21 22:56:32
<Project 5: Arrays, Addressing, and Stack-Passed Parameters   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000056F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countArray . . . . . . . . . . .	P Near	 0000025B _TEXT	Length= 0000002A Public STDCALL
  _iterate . . . . . . . . . . .	L Near	 0000026C _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001CC _TEXT	Length= 0000006E Public STDCALL
  _oddSizedArray . . . . . . . .	L Near	 000001F7 _TEXT	
  _evenSizedArray  . . . . . . .	L Near	 00000205 _TEXT	
  _midValsEqual  . . . . . . . .	L Near	 00000215 _TEXT	
  _midValsNotEqual . . . . . . .	L Near	 0000021C _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 0000022A _TEXT	
exchangeEle  . . . . . . . . . .	P Near	 000001AF _TEXT	Length= 0000001D Public STDCALL
findAverage  . . . . . . . . . .	P Near	 0000023A _TEXT	Length= 00000021 Public STDCALL
  _roundUp . . . . . . . . . . .	L Near	 00000255 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 00000256 _TEXT	
genRandArray . . . . . . . . . .	P Near	 000000EB _TEXT	Length= 0000002C Public STDCALL
  _fillarray . . . . . . . . . .	L Near	 000000FC _TEXT	
intro  . . . . . . . . . . . . .	P Near	 000000B6 _TEXT	Length= 00000035 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B6 Public STDCALL
printArray . . . . . . . . . . .	P Near	 00000117 _TEXT	Length= 0000005D Public STDCALL
  _iterateOverArr  . . . . . . .	L Near	 00000137 _TEXT	
  _newLineChecked  . . . . . . .	L Near	 0000013C _TEXT	
  _newLine . . . . . . . . . . .	L Near	 00000155 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000161 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortArray  . . . . . . . . . . .	P Near	 00000174 _TEXT	Length= 0000003B Public STDCALL
  _iterate . . . . . . . . . . .	L Near	 00000180 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 0000018A _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000190 _TEXT	
  _swap  . . . . . . . . . . . .	L Near	 0000019D _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001A6 _TEXT	
writeThis  . . . . . . . . . . .	P Near	 00000285 _TEXT	Length= 0000001B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 000001FF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 000001D0 _DATA	
counts . . . . . . . . . . . . .	DWord	 0000051F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
desc2  . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
desc . . . . . . . . . . . . . .	Byte	 0000004D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
med  . . . . . . . . . . . . . .	Byte	 0000015F _DATA	
numOf  . . . . . . . . . . . . .	Byte	 0000018F _DATA	
prog . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
randArr  . . . . . . . . . . . .	Byte	 0000014D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted . . . . . . . . . . . . .	Byte	 00000181 _DATA	
space  . . . . . . . . . . . . .	Byte	 0000015D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
